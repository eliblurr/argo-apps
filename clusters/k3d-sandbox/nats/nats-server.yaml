################################################################################
# Common options
################################################################################
nameOverride: nats
fullnameOverride: nats

############################################################
# NATS config
############################################################
config:
  cluster:
    enabled: true
    port: 6222 # This is the port that the NATS servers use to communicate with each other within the cluster
    # must be 2 or higher when jetstream is enabled
    replicas: 3

    # apply to generated route URLs that connect to other pods in the StatefulSet
    routeURLs:
      # if both user and password are set, they will be added to route URLs
      # and the cluster authorization block # not needed for in-cluster communication
      user:
      password:
      # set to true to use FQDN in route URLs
      useFQDN: false
      k8sClusterDomain: cluster.local

    tls: # secure cluster communication, use CRD in BH cluster to create secret and reference here
      enabled: false
      # set secretName in order to mount an existing secret to dir
      secretName:
      dir: /etc/nats-certs/cluster
      cert: tls.crt
      key: tls.key
      # merge or patch the tls config
      # https://docs.nats.io/running-a-nats-service/configuration/securing_nats/tls
      merge: {}
      patch: []
        
  # JetStream allows the NATS server to capture messages and replay them to consumers as needed
  jetstream:
    enabled: true

    fileStore:
      enabled: true
      dir: /data

      ############################################################
      # stateful set -> volume claim templates -> jetstream pvc
      ############################################################
      pvc:
        enabled: true
        size: 10Gi
        storageClassName:

        # merge or patch the jetstream pvc
        # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.24/#persistentvolumeclaim-v1-core
        merge: {}
        patch: []
        # defaults to "{{ include "nats.fullname" $ }}-js"
        name:

      # defaults to the PVC size
      maxSize:

    memoryStore:
      enabled: false
      # ensure that container has a sufficient memory limit greater than maxSize
      maxSize: 1Gi

    # merge or patch the jetstream config
    # https://docs.nats.io/running-a-nats-service/configuration#jetstream
    merge: {}
    patch: []

  nats:
    port: 4222
    tls:
      enabled: false
      # set secretName in order to mount an existing secret to dir
      secretName:
      dir: /etc/nats-certs/nats
      cert: tls.crt
      key: tls.key

  websocket:
    enabled: true
    port: 8080
    tls:
      enabled: false
      # set secretName in order to mount an existing secret to dir
      secretName:
      dir: /etc/nats-certs/websocket
      cert: tls.crt
      key: tls.key
      # merge or patch the tls config
      # https://docs.nats.io/running-a-nats-service/configuration/securing_nats/tls
      merge: {}
      patch: []

    ############################################################
    # ingress
    ############################################################
    # service must be enabled also
    ingress:
      enabled: false
      # must contain at least 1 host otherwise ingress will not be created
      hosts: []
      path: /
      pathType: Exact
      # sets to the ingress class name
      className:
      # set to an existing secret name to enable TLS on the ingress; applies to all hosts
      tlsSecretName:

      # merge or patch the ingress # use this to att annotations
      # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.24/#ingress-v1-networking-k8s-io
      merge: {} 
      patch: []
      # defaults to "{{ include "nats.fullname" $ }}-ws"
      name:

    # merge or patch the websocket config
    # https://docs.nats.io/running-a-nats-service/configuration/websocket/websocket_conf
    merge: {}
    patch: []

  monitor:
    enabled: true
    port: 8222
    tls:
      # config.nats.tls must be enabled also
      # when enabled, monitoring port will use HTTPS with the options from config.nats.tls
      enabled: false

  profiling:
    enabled: true
    port: 65432

  # adds a prefix to the server name, which defaults to the pod name helpful for ensuring server name is unique in a super cluster
  serverNamePrefix: ""

  # merge or patch the nats config
  # https://docs.nats.io/running-a-nats-service/configuration
  # following special rules apply
  #  1. strings that start with << and end with >> will be unquoted
  #     use this for variables and numbers with units
  #  2. keys ending in $include will be switched to include directives
  #     keys are sorted alphabetically, use prefix before $includes to control includes ordering
  #     paths should be relative to /etc/nats-config/nats.conf
  # example:
  #
  #   merge:
  #     $include: ./my-config.conf
  #     $include: ./my-config-last.conf
  #     server_name: nats
  #     authorization:
  #       token: << $TOKEN >>
  #     jetstream:
  #       max_memory_store: << 1GB >>
  #
  # will yield the config:
  # {
  #   include ./my-config.conf;
  #   "authorization": {
  #     "token": $TOKEN
  #   },
  #   "jetstream": {
  #     "max_memory_store": 1GB
  #   },
  #   "server_name": "nats",
  #   include ./my-config-last.conf;
  # }
  # read about authorisation: https://docs.nats.io/running-a-nats-service/configuration/securing_nats/authorization
  merge: 
    # default: SANDBOX
    accounts:
      # ---
      CREDIT:
        jetstream: enabled
        ADMIN_PERMISSION:
          publish: ">"
          subscribe: ">"
        users:
          - user: admin
            password: << $ADMIN_PASS >>
            permissions: << $ADMIN_PERMISSION >>

        # Imports
        # Stream Imports: Allows the consumer account to subscribe to subjects exported by the provider account.
        # Service Imports: Allows the consumer account to make requests to services exported by the provider account.
        imports: 
          - stream: 
              account: SANDBOX
              subject: foo.>
      # ---
      SANDBOX:
        jetstream: enabled
        # Global permissions
        default_permissions:
          publish: 
            - SANDBOX.*
          subscribe: 
            - PUBLIC.>
            - _INBOX.>
            - SANDBOX.>
        ADMIN_PERMISSION:
          publish: 
            - ">"
          subscribe: 
            - ">"
        
        # Users
        users:
          - user: test
            password: << $TEST_PASS >>
            permissions: << $ADMIN_PERMISSION >>
          - nkey: << UDVBS5TSVT6JCMDC2O3WFOB52RI2F3KDHSYCKOVGZLHQOJSRO7QTM6JF >>
            permissions: << $ADMIN_PERMISSION >>
        
        # Exports
        # Stream Exports: Allows other accounts to subscribe to subjects published by the provider account.
        # Service Exports: Allows other accounts to make request-reply interactions with services provided by the provider account.
        exports: 
          - stream: "foo.>"
            accounts: 
              - CREDIT
          - service: ">"

    # authorization:
    #   default_permissions: # special entry - applies to all users that don't have specific permissions set
    #     publish: SANDBOX.*
    #     subscribe: 
    #       - PUBLIC.>
    #       - _INBOX.>
    #       - SANDBOX.>
    #   ADMIN:
    #     publish: ">"
    #     subscribe: ">"
    #   users: 
    #     - user: test
    #       password: << $TEST_PASS >>
    #     - user: admin
    #       password: << $ADMIN_PASS >>
    #       permissions: << $ADMIN >>
    #     - nkey: << UDVBS5TSVT6JCMDC2O3WFOB52RI2F3KDHSYCKOVGZLHQOJSRO7QTM6JF >>
    #       permissions: << $ADMIN >>
  patch: []

############################################################
# stateful set -> pod template -> nats container
############################################################
container:
  # merge or patch the container -> https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.24/#container-v1-core
  merge: 
    envFrom:
      - secretRef:
          name: nats-client-passwords
    livenessProbe: 
      httpGet:
        path: /healthz?js-server-only=true&js-enabled-only=true
    readinessProbe:
      httpGet:
        path: /healthz?js-server-only=true
    startupProbe: 
      httpGet:
        path: /healthz

############################################################
# service
############################################################
service:
  enabled: true
  ports:
    nats:
      enabled: true
    monitor:
      enabled: true
    cluster:
      enabled: false
    websocket:
      enabled: true
    profiling:
      enabled: false

  # merge or patch the service
  # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.24/#service-v1-core
  merge: {}
  patch: []
  # defaults to "{{ include "nats.fullname" $ }}"
  name:

############################################################
# other nats extension points
############################################################
# stateful set
statefulSet:
  # merge or patch the stateful set
  # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.24/#statefulset-v1-apps
  merge: {}
  patch: []
  # defaults to "{{ include "nats.fullname" $ }}"
  name:

# stateful set -> pod template
podTemplate:
  # adds a hash of the ConfigMap as a pod annotation
  # this will cause the StatefulSet to roll when the ConfigMap is updated
  configChecksumAnnotation: true

  # map of topologyKey: topologySpreadConstraint
  # labelSelector will be added to match StatefulSet pods
  #
  # topologySpreadConstraints:
  #   kubernetes.io/hostname:
  #     maxSkew: 1
  #
  topologySpreadConstraints: {}

  # merge or patch the pod template
  # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.24/#pod-v1-core
  merge: {}
  patch: 
    - op: add
      path: /metadata/annotations/test-annotation
      value: "new-value"

# headless service: primarily used by NATS Servers in the Stateful Set to discover one another. [Service Discovery]
headlessService:
  # defaults to "{{ include "nats.fullname" $ }}-headless"
  name: nats-discovery

# pod disruption budget
podDisruptionBudget:
  enabled: true
  # merge or patch the pod disruption budget -> https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.24/#poddisruptionbudget-v1-policy
  merge: {}
  patch: []
  # defaults to "{{ include "nats.fullname" $ }}"
  name:

############################################################
# NATS Box Deployment and associated resources
############################################################
natsBox:
  enabled: false

extraResources: 
  - apiVersion: jetstream.nats.io/v1beta2
    kind: Stream
    metadata:
      name: sandbox
      annotations:
        argocd.argoproj.io/sync-wave: "-1"
    spec:
      name: sandbox
      subjects: ["SANDBOX.*"]
      storage: file
      maxAge: 1h
      account: SANDBOX
    
  - apiVersion: jetstream.nats.io/v1beta2
    kind: Consumer
    metadata:
      name: sandbox-push
      annotations:
        argocd.argoproj.io/sync-wave: "-1"
    spec:
      streamName: sandbox
      durableName: sandbox-push
      deliverSubject: sandbox-push.sandbox
      deliverPolicy: last
      ackPolicy: none
      replayPolicy: instant
      account: SANDBOX

  - apiVersion: jetstream.nats.io/v1beta2
    kind: Consumer
    metadata:
      name: sandbox-pull
      annotations:
        argocd.argoproj.io/sync-wave: "-1"
    spec:
      streamName: sandbox
      durableName: sandbox-pull
      deliverPolicy: all
      filterSubject: SANDBOX.*
      maxDeliver: 20
      ackPolicy: explicit
      account: SANDBOX

  - apiVersion: jetstream.nats.io/v1beta2
    kind: Stream
    metadata:
      name: credit
      annotations:
        argocd.argoproj.io/sync-wave: "-1"
    spec:
      name: credit
      subjects: ["CREDIT.*"]
      storage: file
      maxAge: 1h
      account: CREDIT
    
  - apiVersion: jetstream.nats.io/v1beta2
    kind: Consumer
    metadata:
      name: credit-push
      annotations:
        argocd.argoproj.io/sync-wave: "-1"
    spec:
      streamName: credit
      durableName: credit-push
      deliverSubject: credit-push.credit
      deliverPolicy: last
      ackPolicy: none
      replayPolicy: instant
      account: CREDIT

  - apiVersion: jetstream.nats.io/v1beta2
    kind: Consumer
    metadata:
      name: credit-pull
      annotations:
        argocd.argoproj.io/sync-wave: "-1"
    spec:
      streamName: credit
      durableName: credit-pull
      deliverPolicy: all
      filterSubject: CREDIT.*
      maxDeliver: 20
      ackPolicy: explicit
      account: CREDIT

# create ingress here which in turn creates ca
# USE local cert issuer to generate cert bundle
# ingress auth middleware for monitor
# create ingress for websocket